/**********************************************************************
 * TDRP params for ChillSdbServer
 **********************************************************************/

//======================================================================
//
// ChillSdbServer reads data from a DsRadar queue, in NCAR/RAL format, 
//   reformats it into CHILL SDB (Standard Data Buffer) format, and serves 
//   it out via TCP.
//
//======================================================================
 
//======================================================================
//
// DEBUGGING AND PROCESS CONTROL.
//
//======================================================================
 
///////////// debug ///////////////////////////////////
//
// Debug option.
// If set, debug messages will be printed appropriately.
//
// Type: enum
// Options:
//     DEBUG_OFF
//     DEBUG_NORM
//     DEBUG_VERBOSE
//

debug = DEBUG_NORM;

///////////// no_threads //////////////////////////////
//
// Option to prevent server from using a thread per client.
// For debugging purposes it it sometimes useful to suppress the use of 
//   threads. Set no_threads to TRUE for this type of debugging.
// Type: boolean
//

no_threads = FALSE;

///////////// instance ////////////////////////////////
//
// Process instance.
// Used for procmap registration and auto restarting. If an empty 
//   instance name is provided, the server automatically uses the port 
//   number as its instance name.
// Type: string
//

instance = "ops";

//======================================================================
//
// FMQ INPUT.
//
//======================================================================
 
///////////// input_fmq_url ///////////////////////////
//
// URL for input FMQ data.
// This server reads radar moments from a DsRadar FMQ. This is the URL 
//   of the input data.
// Type: string
//

input_fmq_url = "$(DATA_DIR)/fmq/moments_s";


//======================================================================
//
// INPUT/OUTPUT FIELD NAMES.
//
// These parameters specify the field names which match the fields 
//   expected by the CHILL SDB beam format. If the field does not exist in 
//   the input stream, it will be ignored. For fields which you know are 
//   not present you can set the strings to empty.
//
//======================================================================
 
///////////// DBZ_name ////////////////////////////////
//
// Type: string
//

DBZ_name = "DBZ";

///////////// VEL_name ////////////////////////////////
//
// Type: string
//

VEL_name = "VEL";

///////////// WIDTH_name //////////////////////////////
//
// Type: string
//

WIDTH_name = "WIDTH";

///////////// NCP_name ////////////////////////////////
//
// Type: string
//

NCP_name = "NCP";

///////////// ZDR_name ////////////////////////////////
//
// Type: string
//

ZDR_name = "ZDR";

///////////// PHIDP_name //////////////////////////////
//
// Type: string
//

PHIDP_name = "PHIDP";

///////////// RHOHV_name //////////////////////////////
//
// Type: string
//

RHOHV_name = "RHOHV";

///////////// LDRH_name ///////////////////////////////
//
// Type: string
//

LDRH_name = "LDRH";

///////////// LDRV_name ///////////////////////////////
//
// Type: string
//

LDRV_name = "LDRV";

///////////// KDP_name ////////////////////////////////
//
// Type: string
//

KDP_name = "KDP";

///////////// DBZc_name ///////////////////////////////
//
// DBZ corrected for attenuation, using KDP.
// Type: string
//

DBZc_name = "DBZ_F";

///////////// ZDRc_name ///////////////////////////////
//
// ZDR corrected for attenuation, using KDP.
// Type: string
//

ZDRc_name = "ZDR_F";

///////////// PHIDPf_name /////////////////////////////
//
// PHIDP filtered and smoothed for computing KDP.
// Type: string
//

PHIDPf_name = "PHIDP";

///////////// AVG_H_MAG_name //////////////////////////
//
// AVG H IQ magnitude.
// DSR field name for magnitude of average IQ, H channel.
// Type: string
//

AVG_H_MAG_name = "AVG_H_MAG";

///////////// AVG_H_PHASE_name ////////////////////////
//
// AVG H IQ phase.
// DSR field name for phase of average IQ, H channel.
// Type: string
//

AVG_H_PHASE_name = "AVG_H_PHASE";

///////////// AVG_V_MAG_name //////////////////////////
//
// AVG V IQ magnitude.
// DSR field name for magnitude of average IQ, V channel.
// Type: string
//

AVG_V_MAG_name = "AVG_V_MAG";

///////////// AVG_V_PHASE_name ////////////////////////
//
// AVG V IQ phase.
// DSR field name for phase of average IQ, V channel.
// Type: string
//

AVG_V_PHASE_name = "AVG_V_PHASE";

///////////// LAG0_HC_name ////////////////////////////
//
// Lag0 HC power.
// DSR field name for lag0 (power) H co-polar.
// Type: string
//

LAG0_HC_name = "LAG0_HC";

///////////// LAG0_VC_name ////////////////////////////
//
// Lag0 VC power.
// DSR field name for lag0 (power) V co-polar.
// Type: string
//

LAG0_VC_name = "LAG0_VC";

///////////// LAG0_HX_name ////////////////////////////
//
// Lag0 HX power.
// DSR field name for lag0 (power) H cross-polar.
// Type: string
//

LAG0_HX_name = "LAG0_HX";

///////////// LAG0_VX_name ////////////////////////////
//
// Lag0 VX power.
// DSR field name for lag0 (power) V cross-polar.
// Type: string
//

LAG0_VX_name = "LAG0_VX";

///////////// LAG1_HC_MAG_name ////////////////////////
//
// Lag1 HC magnitude.
// DSR field name for lag1 H co-polar magnitude (dB).
// Type: string
//

LAG1_HC_MAG_name = "LAG1_HC_MAG";

///////////// LAG1_HC_PHASE_name //////////////////////
//
// Lag1 HC phase.
// DSR field name for lag1 H co-polar phase (deg).
// Type: string
//

LAG1_HC_PHASE_name = "LAG1_HC_PHASE";

///////////// LAG1_VC_MAG_name ////////////////////////
//
// Lag1 VC magnitude.
// DSR field name for lag1 V co-polar magnitude (dB).
// Type: string
//

LAG1_VC_MAG_name = "LAG1_VC_MAG";

///////////// LAG1_VC_PHASE_name //////////////////////
//
// Lag1 VC phase.
// DSR field name for lag1 V co-polar phase (deg).
// Type: string
//

LAG1_VC_PHASE_name = "LAG1_VC_PVASE";

///////////// LAG2_HC_MAG_name ////////////////////////
//
// Lag2 HC magnitude.
// DSR field name for lag2 H co-polar magnitude (dB).
// Type: string
//

LAG2_HC_MAG_name = "LAG2_HC_MAG";

///////////// LAG2_HC_PHASE_name //////////////////////
//
// Lag2 HC phase.
// DSR field name for lag2 H co-polar phase (deg).
// Type: string
//

LAG2_HC_PHASE_name = "LAG2_HC_PHASE";

///////////// LAG2_VC_MAG_name ////////////////////////
//
// Lag2 VC magnitude.
// DSR field name for lag2 V co-polar magnitude (dB).
// Type: string
//

LAG2_VC_MAG_name = "LAG2_VC_MAG";

///////////// LAG2_VC_PHASE_name //////////////////////
//
// Lag2 VC phase.
// DSR field name for lag2 V co-polar phase (deg).
// Type: string
//

LAG2_VC_PHASE_name = "LAG2_VC_PVASE";

///////////// LAG0_HV_MAG_name ////////////////////////
//
// Lag0 HV magnitude.
// DSR field name for lag0 HV magnitude (dB).
// Type: string
//

LAG0_HV_MAG_name = "LAG0_HV_MAG";

///////////// LAG0_HV_PHASE_name //////////////////////
//
// Lag0 HV phase.
// DSR field name for lag0 HV phase (deg).
// Type: string
//

LAG0_HV_PHASE_name = "LAG0_HV_PHASE";

//======================================================================
//
// POLARIZATION SETTING.
//
//======================================================================
 
///////////// polarization_mode ///////////////////////
//
// Polarization mode for output fields.
// Downstream clients infer which fields are set from the polarization 
//   mode. H: H only. V: V only. VH: fast alternating mode. VHS: 
//   simulataneous mode.
//
// Type: enum
// Options:
//     POL_MODE_H
//     POL_MODE_V
//     POL_MODE_VH
//     POL_MODE_VHS
//

polarization_mode = POL_MODE_VH;

//======================================================================
//
// SERVER OUTPUT.
//
//======================================================================
 
///////////// port ////////////////////////////////////
//
// Port number.
// The server listens on this port for client requests.
// Type: int
//

port = 2111;

///////////// max_clients /////////////////////////////
//
// Maximum number of clients.
// This is the maximum number of threads the application will produce to 
//   handle client requests.  If the maximum is reached, new clients will 
//   be ignored until the number of clients drops below this limit.
// Type: int
//

max_clients = 4;

///////////// beam_wait_msecs /////////////////////////
//
// Wait between beams (msecs).
// Optional wait between beams, in milliseconds. This can be useful when 
//   a server is trying to catch up with a data stream and is therefore 
//   flooding the client with data.
// Type: int
//

beam_wait_msecs = 0;

