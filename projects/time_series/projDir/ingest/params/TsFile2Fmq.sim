/**********************************************************************
 * TDRP params for TsFile2Fmq
 **********************************************************************/

//======================================================================
//
// TsFile2Fmq reads raw time-series data from a file. It saves the time 
//   series data out to a file message queue (FMQ), which can be read by 
//   multiple clients. Its purpose is mainly for simulation and debugging 
//   time series operations.
//
//======================================================================
 
//======================================================================
//
// DEBUGGING AND PROCESS CONTROL.
//
//======================================================================
 
///////////// debug ///////////////////////////////////
//
// Debug option.
// If set, debug messages will be printed appropriately.
//
// Type: enum
// Options:
//     DEBUG_OFF
//     DEBUG_NORM
//     DEBUG_VERBOSE
//     DEBUG_EXTRA
//

debug = DEBUG_OFF;

///////////// instance ////////////////////////////////
//
// Process instance.
// Used for registration with procmap.
// Type: string
//

instance = "sim";

///////////// register_with_procmap ///////////////////
//
// Option to register with the process mapper.
// If true, this application will try to register with procmap once per 
//   minute. (If unable to do so, no error occurs.).
// Type: boolean
//

register_with_procmap = TRUE;

//======================================================================
//
// MODE OF OPERATION.
//
//======================================================================
 
///////////// mode ////////////////////////////////////
//
// Operating mode.
// In REALTIME mode, the program waits for a new input file to process. 
//   In ARCHIVE mode, it moves through the list of file names specified on 
//   the command line. In SIMULATE mode, the program moves repeatedly 
//   through the file list, creating output files with times set to now A 
//   delay is inserted between pulses to simulate an operational radar.
//
// Type: enum
// Options:
//     ARCHIVE
//     REALTIME
//     SIMULATE
//

mode = SIMULATE;

//======================================================================
//
// DATA INPUT.
//
//======================================================================
 
///////////// input_dir ///////////////////////////////
//
// Dir for input volume scan files.
// This is used in REALTIME mode only. In ARCHIVE and SIMULATE modes, 
//   the file paths are specified on the command line.
// Type: string
//

input_dir = "$(DATA_DIR)/sim/time_series/example";

///////////// use_ldata_info_file /////////////////////
//
// Option to use _latest_data_info file as input trigger.
// REALTIME mode only. If true, waits on _latest_data_info file. If 
//   false, scans the directory for new file.
// Type: boolean
//

use_ldata_info_file = FALSE;

///////////// max_realtime_valid_age //////////////////
//
// Max valid age of rdata input files in realtime mode (secs).
// This the max valid age for an incoming file. The program will wait 
//   for a data file more recent than this age.
// Minimum val: 1
// Type: int
//

max_realtime_valid_age = 360;

//======================================================================
//
// OUTPUT FMQ DETAILS.
//
//======================================================================
 
///////////// output_fmq_path /////////////////////////
//
// Path to output FMQ.
// The FMQ consists of 2 files, ??.buf and ??.stat.
// Type: string
//

output_fmq_path = "$(DATA_DIR)/fmq/tseries";

///////////// output_fmq_size /////////////////////////
//
// Size of output FMQ, in bytes.
// This is the total size of the output FMQ buffer.
// Type: int
//

output_fmq_size = 100000000;

///////////// output_fmq_nslots ///////////////////////
//
// Number of slots in the output FMQ.
// The number of slots corresponds to the maximum number of messages 
//   which may be written to the buffer before overwrites occur. However, 
//   overwrites may occur sooner if the size is not set large enough.
// Type: int
//

output_fmq_nslots = 1000;

///////////// output_fmq_blocking /////////////////////
//
// Option to set up the FMQ as blocking.
// If TRUE, FMQ will be set up FMQ for blocking operation. If the FMQ 
//   becomes full, Test2Dsr will then block until there is space for more 
//   data. This should only be used if there is a single client reading 
//   the FMQ.
// Type: boolean
//

output_fmq_blocking = FALSE;

///////////// write_latest_data_info //////////////////
//
// Option to write latest_data_info for the output FMQ.
// If TRUE, latest_data_info will be written for the output FMQ, at the 
//   specified interval.
// Type: boolean
//

write_latest_data_info = FALSE;

///////////// latest_data_info_interval ///////////////
//
// Number of seconds between writing latest_data_info.
// If write_latest_data_info is TRUE, the program will register with the 
//   DataMapper when the output FMQ is written to.
// Type: int
//

latest_data_info_interval = 5;

//======================================================================
//
// OUTPUT MESSAGE DETAILS.
//
// The output messages are written to the FMQ. To improve performance, 
//   each message contains a number of time series pulses.
//
//======================================================================
 
///////////// n_pulses_per_message ////////////////////
//
// Number of pulses per output message.
// The actual number will sometimes be 1 less than this, because an info 
//   data part may will be written once in a while.
// Type: int
//

n_pulses_per_message = 200;

///////////// n_pulses_per_info ///////////////////////
//
// How often to write an info part.
// The info part includes data which does not change on a pulse-to-pulse 
//   basis.
// Type: int
//

n_pulses_per_info = 1000;

///////////// data_mapper_report_interval /////////////
//
// Number of seconds between reports to DataMapper.
// If > 0, the program will register with the DataMapper when the output 
//   FMQ is written to. If <= 0, registration will not be performed.
// Type: int
//

data_mapper_report_interval = 5;

//======================================================================
//
// ADJUSTING THE TIME.
//
//======================================================================
 
///////////// set_time_to_now /////////////////////////
//
// Option to set the pulse time to the current time.
// This can be used for two purposes: (a) if the drx time is incorrect, 
//   and you wish to override the time, or (b) for simulating an 
//   operational radar, or for correcting.
// Type: boolean
//

set_time_to_now = TRUE;

///////////// set_time_offset /////////////////////////
//
// Option to change the time by a selected offset.
// Type: boolean
//

set_time_offset = FALSE;

///////////// time_offset_secs ////////////////////////
//
// Time offset to be applied (secs).
// Type: int
//

time_offset_secs = 0;

//======================================================================
//
// CONVERTING THE IQ DATA ENCODING TYPE.
//
//======================================================================
 
///////////// convert_iq_encoding /////////////////////
//
// Option to convert the IQ encoding type.
// The IQ data will be converted to the requested encoding type before 
//   being written to the FMQ.
// Type: boolean
//

convert_iq_encoding = FALSE;

///////////// iq_encoding /////////////////////////////
//
// Encoding type for outgoing IQ data.
// Only applies if convert_iq_encoding is true.
//
// Type: enum
// Options:
//     IQ_ENCODING_FL32
//     IQ_ENCODING_SCALED_SI16
//     IWRF_IQ_ENCODING_DBM_PHASE_SI16
//     IWRF_IQ_ENCODING_SIGMET_FL16
//

iq_encoding = IQ_ENCODING_FL32;

//======================================================================
//
// SIMULATION MODE.
//
//======================================================================
 
///////////// sim_mode_prf ////////////////////////////
//
// PRF for sim mode (pulses/s).
// The app will attempt to deliver pulses at this rate.
// Type: double
//

sim_mode_prf = 1000;

///////////// sim_override_radar_params ///////////////
//
// Option to override radar params in simulate mode.
// If TRUE, the following sim parameters will be used to override the 
//   radar params in the time series. If FALSE, the original params will 
//   be retained.
// Type: boolean
//

sim_override_radar_params = FALSE;

///////////// sim_radar_name //////////////////////////
//
// Radar name for simulation mode.
// Type: string
//

sim_radar_name = "$(RADAR_NAME)";

///////////// sim_site_name ///////////////////////////
//
// Site name for simulation mode.
// Type: string
//

sim_site_name = "$(SITE_NAME)";

///////////// sim_latitude_deg ////////////////////////
//
// Radar latitude (deg).
// See override_radar_location.
// Type: double
//

sim_latitude_deg = $(RADAR_LAT);

///////////// sim_longitude_deg ///////////////////////
//
// Radar longitude (deg).
// See override_radar_location.
// Type: double
//

sim_longitude_deg = $(RADAR_LON);

///////////// sim_altitude_meters /////////////////////
//
// Radar altitude (meters).
// See override_radar_location.
// Type: double
//

sim_altitude_meters = $(RADAR_ALT_M);

///////////// sim_beam_width_h ////////////////////////
//
// Horizontal beam width (deg) for simulation mode.
// Type: double
//

sim_beam_width_h = 0.92;

///////////// sim_beam_width_v ////////////////////////
//
// Vertical beam width (deg) for simulation mode.
// Type: double
//

sim_beam_width_v = 0.92;

///////////// sim_staggered_prt ///////////////////////
//
// Option to simulate staggered PRT operations.
// See 'staggered_mode'. Selected pulses will be omitted to simulate 
//   this mode.
// Type: boolean
//

sim_staggered_prt = FALSE;

///////////// stagger_mode ////////////////////////////
//
// In this mode, we leave out selected pulses and change the data in the 
//   remaining pulses, as required, to simulate staggered PRT mode.
//
// Type: enum
// Options:
//     STAGGER_2_3
//     STAGGER_3_4
//     STAGGER_4_5
//

stagger_mode = STAGGER_2_3;

///////////// sim_select_pulse_interval ///////////////
//
// Option to simulate a lower PRT by discarding pulses and only keeping 
//   pulses at a selected interval.
// Type: boolean
//

sim_select_pulse_interval = FALSE;

///////////// sim_pulse_interval //////////////////////
//
// Interval at which you wish to keep the pulses.
// see sim_select_pulse_interval.
// Type: int
//

sim_pulse_interval = 2;

///////////// sim_add_dual_pol_channel ////////////////
//
// Option to add a second channel for dual-polarization simulations.
// Type: boolean
//

sim_add_dual_pol_channel = FALSE;

///////////// sim_fixed_zdr ///////////////////////////
//
// Constant ZDR value for dual-pol simulation (dB).
// The power in the second channel will be lower that the first by this 
//   amount.
// Type: double
//

sim_fixed_zdr = 3;

///////////// sim_fixed_phidp /////////////////////////
//
// Constant PHIDP value for dual-pol simulation (deg).
// The phase in the second channel will be computed relative to the 
//   first channel to yield this phidp value.
// Type: double
//

sim_fixed_phidp = 45;

///////////// override_xmit_rcv_mode //////////////////
//
// Option to override the transmit/receive mode in the pulse info 
//   header.
// Type: boolean
//

override_xmit_rcv_mode = FALSE;

///////////// xmit_rcv_mode ///////////////////////////
//
// Simulated transmit-receive mode.
// This will be used to modify the ops info.
//
// Type: enum
// Options:
//     SINGLE_POL
//     DP_ALT_HV_CO_ONLY
//     DP_ALT_HV_CO_CROSS
//     DP_ALT_HV_FIXED_HV
//     DP_SIM_HV_FIXED_HV
//     DP_SIM_HV_SWITCHED_HV
//     DP_H_ONLY_FIXED_HV
//     DP_V_ONLY_FIXED_HV
//

xmit_rcv_mode = SINGLE_POL;

