/**********************************************************************
 * TDRP params for MdvPartRain
 **********************************************************************/

//======================================================================
//
// MdvPartRain reads in dual polarization data in an MDV polar file, 
//   computes derived fields and writes these out to an MDV file.
//
//======================================================================
 
//======================================================================
//
// DEBUG AND PROCESS CONTROL.
//
//======================================================================
 
///////////// debug ///////////////////////////////////
//
// Debug option.
// If set, debug messages will be printed appropriately.
//
// Type: enum
// Options:
//     DEBUG_OFF
//     DEBUG_NORM
//     DEBUG_VERBOSE
//

debug = DEBUG_OFF;

///////////// instance ////////////////////////////////
//
// Process instance.
// Used for registration with procmap.
// Type: string
//

instance = "ops.sec";

///////////// mode ////////////////////////////////////
//
// Operating mode.
// In REALTIME mode, the program waits for a new input file. In ARCHIVE 
//   mode, it moves through the data between the start and end times set 
//   on the command line. In FILELIST mode, it moves through the list of 
//   file names specified on the command line.
//
// Type: enum
// Options:
//     ARCHIVE
//     REALTIME
//     FILELIST
//

mode = ARCHIVE;

//======================================================================
//
// DATA INPUT.
//
//======================================================================
 
///////////// input_dir ///////////////////////////////
//
// Directory for input data.
// This is used in REALTIME and ARCHIVE modes only. In FILELIST mode, 
//   the file paths are specified on the command line.
// Type: string
//

input_dir = "$(DATA_DIR)/mdv/radarPolar/ops/sec";

///////////// set_elev_limits /////////////////////////
//
// Option to set elevation limits.
// Type: boolean
//

set_elev_limits = FALSE;

///////////// lower_elev //////////////////////////////
//
// Lower elev limit (deg).
// Type: float
//

lower_elev = 0;

///////////// upper_elev //////////////////////////////
//
// Upper elev limit (deg).
// Type: float
//

upper_elev = 0;

//======================================================================
//
// INPUT FIELD INFORMATION.
//
// Names of input fields in the Dsr queue.
//
//======================================================================
 
///////////// DBZ_field_name //////////////////////////
//
// Field name for DBZ (ZH) in the input file.
// Type: string
//

DBZ_field_name = "DBZ_F";

///////////// SNR_field_name //////////////////////////
//
// Field name for SNR in the input file.
// Type: string
//

SNR_field_name = "SNR_F";

///////////// ZDR_field_name //////////////////////////
//
// Field name for ZDR in the input file.
// Type: string
//

ZDR_field_name = "ZDR_F";

///////////// LDR_available ///////////////////////////
//
// Is the LDR field available?.
// Type: boolean
//

LDR_available = FALSE;

///////////// LDR_field_name //////////////////////////
//
// Field name for LDR, if available in the input file.
// Type: string
//

LDR_field_name = "LDR_F";

///////////// PHIDP_field_name ////////////////////////
//
// Field name for PHIDP in the input file.
// Type: string
//

PHIDP_field_name = "PHIDP_F";

///////////// RHOHV_field_name ////////////////////////
//
// Field name for RHOHV in the input file.
// Type: string
//

RHOHV_field_name = "RHOHV_F";

//======================================================================
//
// SMOOTHING INPUT FIELDS FOR PRECIP AND PID.
//
// DBZ, ZDR, LDR and RHOHV can be somewhat noisy gate-to-gate. This 
//   section gives you the option of smoothing the fields in range by 
//   applying a median filter.
//
//======================================================================
 
///////////// apply_median_filter_to_DBZ //////////////
//
// Option to filter DBZ with median filter.
// The filter is computed in range, and affects both rain rate and PID.
// Type: boolean
//

apply_median_filter_to_DBZ = TRUE;

///////////// DBZ_median_filter_len ///////////////////
//
// Length of median filter for DBZ - gates.
// See 'appply_median_filter_to_DBZ'.
// Type: int
//

DBZ_median_filter_len = 5;

///////////// apply_median_filter_to_ZDR //////////////
//
// Option to filter ZDR with median filter.
// The filter is computed in range, and affects both rain rate and PID.
// Type: boolean
//

apply_median_filter_to_ZDR = TRUE;

///////////// ZDR_median_filter_len ///////////////////
//
// Length of median filter for ZDR - gates.
// See 'appply_median_filter_to_ZDR'.
// Type: int
//

ZDR_median_filter_len = 5;

///////////// apply_median_filter_to_LDR //////////////
//
// Option to filter LDR with median filter.
// The filter is computed in range, and affects PID only.
// Type: boolean
//

apply_median_filter_to_LDR = TRUE;

///////////// LDR_median_filter_len ///////////////////
//
// Length of median filter for LDR - gates.
// See 'appply_median_filter_to_LDR'.
// Type: int
//

LDR_median_filter_len = 5;

///////////// apply_median_filter_to_RHOHV ////////////
//
// Option to filter RHOHV with median filter.
// The filter is computed in range, and affects PID only.
// Type: boolean
//

apply_median_filter_to_RHOHV = TRUE;

///////////// RHOHV_median_filter_len /////////////////
//
// Length of median filter for RHOHV - gates.
// See 'appply_median_filter_to_RHOHV'.
// Type: int
//

RHOHV_median_filter_len = 5;

///////////// ngates_for_sdev /////////////////////////
//
// Number of gates for computing standard deviations.
// This applies to computing the standard deviation of zdr and phidp, 
//   for PID.
// Type: int
//

ngates_for_sdev = 9;

//======================================================================
//
// SMOOTHING FIELDS FOR KDP.
//
// PHIDP can have spikes in it. This section gives you the option of 
//   smoothing the fields in range by applying a median filter before 
//   computing KDP.
//
//======================================================================
 
///////////// apply_median_filter_to_PHIDP ////////////
//
// Option to filter PHIDP with median filter.
// The filter is applied in range.
// Type: boolean
//

apply_median_filter_to_PHIDP = TRUE;

///////////// PHIDP_median_filter_len /////////////////
//
// Length of median filter for PHIDP - gates.
// See 'appply_median_filter_to_PHIDP'.
// Type: int
//

PHIDP_median_filter_len = 5;

//======================================================================
//
// CENSORING.
//
//======================================================================
 
///////////// min_valid_interest //////////////////////
//
// Minimum valid interest value for identifying a particle.
// If the computed interest value is below this, the PID is set to 
//   missing.
// Type: double
//

min_valid_interest = 0.7;

///////////// censor_using_thresholds /////////////////
//
// Option to censor the output using set thresholds.
// If TRUE, the thresholding fields will be examined to see if it is 
//   within the desired range. Examples are SNR (Signal-to-noise) and NCP 
//   (normalized coherent power). If the specified field at a gate falls 
//   outside the specified range, all output fields will be set to missing 
//   for that gate.
// Type: boolean
//

censor_using_thresholds = TRUE;

///////////// censor_field_name ///////////////////////
//
// Name of field for thresholding.
// This is the DSR (input) field name for the thresholding field. If 
//   this field is available, it is used for thresholding. If not, 
//   thresholding will not be performed.
// Type: string
//

censor_field_name = "SNR_F";

///////////// censor_min_value ////////////////////////
//
// Minimum threshold - see 'censor_output_using_thresholds'.
// The specified field at a gate must exceed this value for the gate to 
//   be accepted.
// Type: double
//

censor_min_value = 0;

///////////// censor_max_value ////////////////////////
//
// Maximum threshold - see 'censor_output_using_thresholds'.
// The specified field at a gate must be less than this value for the 
//   gate to be accepted.
// Type: double
//

censor_max_value = 1000;

///////////// min_DBZ_for_KDP_rates ///////////////////
//
// KDP-based rates will be set to 0 for gates with DBZ values below this 
//   threshold.
// KDP can be a noisy field, which can lead to large KDP-based estimates 
//   even in low reflectivity areas. Use of this threshold prevents high 
//   KDP estimates in low reflectivity regions.
// Type: double
//

min_DBZ_for_KDP_rates = 25;

///////////// min_valid_rate //////////////////////////
//
// Minimum valid precip rate (mm/hr).
// If any computed rate is less than this value, it is set to 0.
// Type: double
//

min_valid_rate = 0.1;

//======================================================================
//
// PRECIP COMPUTATIONS.
//
// Coefficients for the precip equations.
//
//======================================================================
 
//======================================================================
//
// PRECIP_RATE_ZH.
//
// RATE_ZH = zh_aa * (ZH ** zh_bb).
//
//======================================================================
 
///////////// zh_aa ///////////////////////////////////
//
// Coefficient for PRECIP_RATE_ZH.
// Type: double
//

zh_aa = 0.0396;

///////////// zh_bb ///////////////////////////////////
//
// Exponent for PRECIP_RATE_ZH.
// Type: double
//

zh_bb = 0.679;

//======================================================================
//
// PRECIP_RATE_Z_ZDR.
//
// RATE_Z_ZDR = zzdr_aa * (ZH ** zzdr_bb) * (ZDR ** zzdr_cc).
//
//======================================================================
 
///////////// zzdr_aa /////////////////////////////////
//
// Coefficient for PRECIP_RATE_ZZDR.
// Type: double
//

zzdr_aa = 0.00786;

///////////// zzdr_bb /////////////////////////////////
//
// ZH exponent for PRECIP_RATE_ZZDR.
// Type: double
//

zzdr_bb = 0.967;

///////////// zzdr_cc /////////////////////////////////
//
// ZDR exponent for PRECIP_RATE_ZZDR.
// Type: double
//

zzdr_cc = -4.98;

//======================================================================
//
// PRECIP_RATE_KDP.
//
// RATE_KDP = sign(KDP) * kdp_aa * (|KDP| ** kdp_bb).
//
//======================================================================
 
///////////// kdp_aa //////////////////////////////////
//
// Coefficient for PRECIP_RATE_KDP.
// Type: double
//

kdp_aa = 53.3;

///////////// kdp_bb //////////////////////////////////
//
// Exponent for PRECIP_RATE_KDP.
// Type: double
//

kdp_bb = 0.669;

//======================================================================
//
// PRECIP_RATE_KDP_ZDR.
//
// RATE_KDP_ZDR = sign(KDP) * kdpzdr_aa * (|KDP| ** kdpzdr_bb) * (ZDR ** 
//   kdpzdr_cc).
//
//======================================================================
 
///////////// kdpzdr_aa ///////////////////////////////
//
// Coefficient for PRECIP_RATE_KDP_ZDR.
// Type: double
//

kdpzdr_aa = 192;

///////////// kdpzdr_bb ///////////////////////////////
//
// KDP exponent for PRECIP_RATE_KDP_ZDR.
// Type: double
//

kdpzdr_bb = 0.946;

///////////// kdpzdr_cc ///////////////////////////////
//
// ZDR exponent for PRECIP_RATE_KDP_ZDR.
// Type: double
//

kdpzdr_cc = -3.45;

//======================================================================
//
// PRECIP_RATE_HYBRID.
//
// The HYBRID rate is a combination of the other rates.
//
//======================================================================
 
///////////// hybrid_aa ///////////////////////////////
//
// If RATE_ZH <= hybrid_aa, RATE_HYBRID = RATE_ZH.
// Type: double
//

hybrid_aa = 6;

///////////// hybrid_bb ///////////////////////////////
//
// Else if RATE_Z_ZDR <= hybrid_bb, RATE_HYBRID = RATE_Z_ZDR.
// Type: double
//

hybrid_bb = 50;

///////////// hybrid_cc ///////////////////////////////
//
// Else If RATE_Z_ZDR <= hybrid_cc, RATE_HYBRID = RATE_KDP_ZDR.
// Else if RATE_Z_ZDR > hybrid_bb, RATE_HYBRID = RATE_KDP.
// Type: double
//

hybrid_cc = 100;

//======================================================================
//
// PARTICLE ID COMPUTATIONS - PID.
//
//======================================================================
 
///////////// compute_pid /////////////////////////////
//
// Option to compute particle ID.
// Type: boolean
//

compute_pid = TRUE;

///////////// pid_thresholds_file_path ////////////////
//
// File path for fuzzy logic thresholds for PID.
// This file contains the thresholds and weights for computing particle 
//   ID.
// Type: string
//

pid_thresholds_file_path = "$(PROJ_DIR)/titan/params/pid_thresholds.ops";

//======================================================================
//
// DATA OUTPUT.
//
//======================================================================
 
///////////// output_url //////////////////////////////
//
// Output URL.
// Output MDV data is written to this URL.
// Type: string
//

output_url = "$(DATA_DIR)/mdv/radarPolar/derived/sec";

//======================================================================
//
// KDP FIELDS.
//
//======================================================================
 
///////////// KDP_output_field ////////////////////////
//
// If write is TRUE, KDP is included in the output MDV file.
//
// Type: struct
//   typedef struct {
//      string name;
//      string long_name;
//      string units;
//      encoding_type_t encoding;
//        Options:
//          ENCODING_ASIS
//          ENCODING_INT8
//          ENCODING_INT16
//          ENCODING_FLOAT32
//      boolean write;
//   }
//
//

KDP_output_field = { "KDP", "KDP", "deg/km", ENCODING_INT16, TRUE };

///////////// DBZ_FOR_KDP_output_field ////////////////
//
// If write is TRUE, the DBZ used by the kdp algorithm is included in 
//   the output MDV file.
//
// Type: struct
//   typedef struct {
//      string name;
//      string long_name;
//      string units;
//      encoding_type_t encoding;
//        Options:
//          ENCODING_ASIS
//          ENCODING_INT8
//          ENCODING_INT16
//          ENCODING_FLOAT32
//      boolean write;
//   }
//
//

DBZ_FOR_KDP_output_field = { "DBZ_FOR_KDP", "DBZ_used_FOR_KDP_comps", "deg", ENCODING_INT16, FALSE };

///////////// SNR_FOR_KDP_output_field ////////////////
//
// If write is TRUE, the SNR used by the kdp algorithm is included in 
//   the output MDV file.
//
// Type: struct
//   typedef struct {
//      string name;
//      string long_name;
//      string units;
//      encoding_type_t encoding;
//        Options:
//          ENCODING_ASIS
//          ENCODING_INT8
//          ENCODING_INT16
//          ENCODING_FLOAT32
//      boolean write;
//   }
//
//

SNR_FOR_KDP_output_field = { "SNR_FOR_KDP", "SNR_used_FOR_KDP_comps", "deg", ENCODING_INT16, FALSE };

///////////// ZDR_FOR_KDP_output_field ////////////////
//
// If write is TRUE, the ZDR used by the kdp algorithm is included in 
//   the output MDV file.
//
// Type: struct
//   typedef struct {
//      string name;
//      string long_name;
//      string units;
//      encoding_type_t encoding;
//        Options:
//          ENCODING_ASIS
//          ENCODING_INT8
//          ENCODING_INT16
//          ENCODING_FLOAT32
//      boolean write;
//   }
//
//

ZDR_FOR_KDP_output_field = { "ZDR_FOR_KDP", "ZDR_used_FOR_KDP_comps", "deg", ENCODING_INT16, FALSE };

///////////// RHOHV_FOR_KDP_output_field //////////////
//
// If write is TRUE, the RHOHV used by the kdp algorithm is included in 
//   the output MDV file.
//
// Type: struct
//   typedef struct {
//      string name;
//      string long_name;
//      string units;
//      encoding_type_t encoding;
//        Options:
//          ENCODING_ASIS
//          ENCODING_INT8
//          ENCODING_INT16
//          ENCODING_FLOAT32
//      boolean write;
//   }
//
//

RHOHV_FOR_KDP_output_field = { "RHOHV_FOR_KDP", "RHOHV_used_FOR_KDP_comps", "deg", ENCODING_INT16, FALSE };

///////////// PHIDP_FOR_KDP_output_field //////////////
//
// If write is TRUE, the PHIDP used by the kdp algorithm is included in 
//   the output MDV file.
//
// Type: struct
//   typedef struct {
//      string name;
//      string long_name;
//      string units;
//      encoding_type_t encoding;
//        Options:
//          ENCODING_ASIS
//          ENCODING_INT8
//          ENCODING_INT16
//          ENCODING_FLOAT32
//      boolean write;
//   }
//
//

PHIDP_FOR_KDP_output_field = { "PHIDP_FOR_KDP", "PHIDP_used_FOR_KDP_comps", "deg", ENCODING_INT16, FALSE };

///////////// SDPHIDP_FOR_KDP_output_field ////////////
//
// If write is TRUE, the SDPHIDP used by the kdp algorithm is included 
//   in the output MDV file.
//
// Type: struct
//   typedef struct {
//      string name;
//      string long_name;
//      string units;
//      encoding_type_t encoding;
//        Options:
//          ENCODING_ASIS
//          ENCODING_INT8
//          ENCODING_INT16
//          ENCODING_FLOAT32
//      boolean write;
//   }
//
//

SDPHIDP_FOR_KDP_output_field = { "SDPHIDP_FOR_KDP", "SDPHIDP_used_FOR_KDP_comps", "deg", ENCODING_INT16, FALSE };

//======================================================================
//
// PRECIP FIELDS.
//
//======================================================================
 
///////////// RATE_ZH_output_field ////////////////////
//
// If write is TRUE, the precip rate from ZH is included in the output 
//   MDV file.
//
// Type: struct
//   typedef struct {
//      string name;
//      string long_name;
//      string units;
//      encoding_type_t encoding;
//        Options:
//          ENCODING_ASIS
//          ENCODING_INT8
//          ENCODING_INT16
//          ENCODING_FLOAT32
//      boolean write;
//   }
//
//

RATE_ZH_output_field = { "RATE_ZH", "Precip rate ZH", "mm/hr", ENCODING_INT16, TRUE };

///////////// RATE_Z_ZDR_output_field /////////////////
//
// If write is TRUE, the precip rate from Z_ZDR is included in the 
//   output MDV file.
//
// Type: struct
//   typedef struct {
//      string name;
//      string long_name;
//      string units;
//      encoding_type_t encoding;
//        Options:
//          ENCODING_ASIS
//          ENCODING_INT8
//          ENCODING_INT16
//          ENCODING_FLOAT32
//      boolean write;
//   }
//
//

RATE_Z_ZDR_output_field = { "RATE_Z_ZDR", "Precip rate Z_ZDR", "mm/hr", ENCODING_INT16, TRUE };

///////////// RATE_KDP_output_field ///////////////////
//
// If write is TRUE, the precip rate from KDP is included in the output 
//   MDV file.
//
// Type: struct
//   typedef struct {
//      string name;
//      string long_name;
//      string units;
//      encoding_type_t encoding;
//        Options:
//          ENCODING_ASIS
//          ENCODING_INT8
//          ENCODING_INT16
//          ENCODING_FLOAT32
//      boolean write;
//   }
//
//

RATE_KDP_output_field = { "RATE_KDP", "Precip rate KDP", "mm/hr", ENCODING_INT16, TRUE };

///////////// RATE_KDP_ZDR_output_field ///////////////
//
// If write is TRUE, the precip rate from KDP_ZDR is included in the 
//   output MDV file.
//
// Type: struct
//   typedef struct {
//      string name;
//      string long_name;
//      string units;
//      encoding_type_t encoding;
//        Options:
//          ENCODING_ASIS
//          ENCODING_INT8
//          ENCODING_INT16
//          ENCODING_FLOAT32
//      boolean write;
//   }
//
//

RATE_KDP_ZDR_output_field = { "RATE_KDP_ZDR", "Precip rate KDP_ZDR", "mm/hr", ENCODING_INT16, TRUE };

///////////// RATE_HYBRID_output_field ////////////////
//
// If write is TRUE, the HYBRID field is included in the output MDV 
//   file.
//
// Type: struct
//   typedef struct {
//      string name;
//      string long_name;
//      string units;
//      encoding_type_t encoding;
//        Options:
//          ENCODING_ASIS
//          ENCODING_INT8
//          ENCODING_INT16
//          ENCODING_FLOAT32
//      boolean write;
//   }
//
//

RATE_HYBRID_output_field = { "RATE_HYBRID", "Precip rate HYBRID", "mm/hr", ENCODING_INT16, TRUE };

///////////// DBZ_FOR_RATE_output_field ///////////////
//
// If write is TRUE, the DBZ used by the rate algorithm is included in 
//   the output MDV file.
//
// Type: struct
//   typedef struct {
//      string name;
//      string long_name;
//      string units;
//      encoding_type_t encoding;
//        Options:
//          ENCODING_ASIS
//          ENCODING_INT8
//          ENCODING_INT16
//          ENCODING_FLOAT32
//      boolean write;
//   }
//
//

DBZ_FOR_RATE_output_field = { "DBZ_FOR_RATE", "DBZ_used_FOR_RATE_comps", "dBZ", ENCODING_INT16, FALSE };

///////////// ZDR_FOR_RATE_output_field ///////////////
//
// If write is TRUE, the ZDR used by the rate algorithm is included in 
//   the output MDV file.
//
// Type: struct
//   typedef struct {
//      string name;
//      string long_name;
//      string units;
//      encoding_type_t encoding;
//        Options:
//          ENCODING_ASIS
//          ENCODING_INT8
//          ENCODING_INT16
//          ENCODING_FLOAT32
//      boolean write;
//   }
//
//

ZDR_FOR_RATE_output_field = { "ZDR_FOR_RATE", "ZDR_used_FOR_RATE_comps", "dB", ENCODING_INT16, FALSE };

///////////// KDP_FOR_RATE_output_field ///////////////
//
// If write is TRUE, the KDP used by the rate algorithm is included in 
//   the output MDV file.
//
// Type: struct
//   typedef struct {
//      string name;
//      string long_name;
//      string units;
//      encoding_type_t encoding;
//        Options:
//          ENCODING_ASIS
//          ENCODING_INT8
//          ENCODING_INT16
//          ENCODING_FLOAT32
//      boolean write;
//   }
//
//

KDP_FOR_RATE_output_field = { "KDP_FOR_RATE", "KDP_used_FOR_RATE_comps", "deg/km", ENCODING_INT16, FALSE };

//======================================================================
//
// PARTICLE ID FIELDS.
//
//======================================================================
 
///////////// PID_output_field ////////////////////////
//
// If write is TRUE, PID is included in the output MDV file.
//
// Type: struct
//   typedef struct {
//      string name;
//      string long_name;
//      string units;
//      encoding_type_t encoding;
//        Options:
//          ENCODING_ASIS
//          ENCODING_INT8
//          ENCODING_INT16
//          ENCODING_FLOAT32
//      boolean write;
//   }
//
//

PID_output_field = { "PID", "Particle ID", "", ENCODING_INT8, TRUE };

///////////// PID_INT_output_field ////////////////////
//
// If write is TRUE, interest for most likely PID is included in the 
//   output MDV file.
//
// Type: struct
//   typedef struct {
//      string name;
//      string long_name;
//      string units;
//      encoding_type_t encoding;
//        Options:
//          ENCODING_ASIS
//          ENCODING_INT8
//          ENCODING_INT16
//          ENCODING_FLOAT32
//      boolean write;
//   }
//
//

PID_INT_output_field = { "PidInterest", "PID interest", "", ENCODING_INT16, TRUE };

///////////// PID2_output_field ///////////////////////
//
// If write is TRUE, second most likely PID is included in the output 
//   MDV file.
//
// Type: struct
//   typedef struct {
//      string name;
//      string long_name;
//      string units;
//      encoding_type_t encoding;
//        Options:
//          ENCODING_ASIS
//          ENCODING_INT8
//          ENCODING_INT16
//          ENCODING_FLOAT32
//      boolean write;
//   }
//
//

PID2_output_field = { "PID2", "Particle ID2", "", ENCODING_INT8, TRUE };

///////////// PID_INT2_output_field ///////////////////
//
// If write is TRUE, interest for second most likely PID is included in 
//   the output MDV file.
//
// Type: struct
//   typedef struct {
//      string name;
//      string long_name;
//      string units;
//      encoding_type_t encoding;
//        Options:
//          ENCODING_ASIS
//          ENCODING_INT8
//          ENCODING_INT16
//          ENCODING_FLOAT32
//      boolean write;
//   }
//
//

PID_INT2_output_field = { "PidInterest2", "PID interest 2", "", ENCODING_INT16, TRUE };

///////////// PID_CONFIDENCE_output_field /////////////
//
// If write is TRUE, confidence in PID is included in the output MDV 
//   file.
//
// Type: struct
//   typedef struct {
//      string name;
//      string long_name;
//      string units;
//      encoding_type_t encoding;
//        Options:
//          ENCODING_ASIS
//          ENCODING_INT8
//          ENCODING_INT16
//          ENCODING_FLOAT32
//      boolean write;
//   }
//
//

PID_CONFIDENCE_output_field = { "PidConfidence", "PID confidence", "", ENCODING_INT16, FALSE };

///////////// DBZ_FOR_PID_output_field ////////////////
//
// If write is TRUE, the DBZ used by the pid algorithm is included in 
//   the output MDV file.
//
// Type: struct
//   typedef struct {
//      string name;
//      string long_name;
//      string units;
//      encoding_type_t encoding;
//        Options:
//          ENCODING_ASIS
//          ENCODING_INT8
//          ENCODING_INT16
//          ENCODING_FLOAT32
//      boolean write;
//   }
//
//

DBZ_FOR_PID_output_field = { "DBZ_FOR_PID", "DBZ_used_FOR_PID_comps", "dBZ", ENCODING_INT16, FALSE };

///////////// ZDR_FOR_PID_output_field ////////////////
//
// If write is TRUE, the ZDR used by the pid algorithm is included in 
//   the output MDV file.
//
// Type: struct
//   typedef struct {
//      string name;
//      string long_name;
//      string units;
//      encoding_type_t encoding;
//        Options:
//          ENCODING_ASIS
//          ENCODING_INT8
//          ENCODING_INT16
//          ENCODING_FLOAT32
//      boolean write;
//   }
//
//

ZDR_FOR_PID_output_field = { "ZDR_FOR_PID", "ZDR_used_FOR_PID_comps", "dB", ENCODING_INT16, TRUE };

///////////// LDR_FOR_PID_output_field ////////////////
//
// If write is TRUE, the LDR used by the pid algorithm is included in 
//   the output MDV file.
//
// Type: struct
//   typedef struct {
//      string name;
//      string long_name;
//      string units;
//      encoding_type_t encoding;
//        Options:
//          ENCODING_ASIS
//          ENCODING_INT8
//          ENCODING_INT16
//          ENCODING_FLOAT32
//      boolean write;
//   }
//
//

LDR_FOR_PID_output_field = { "LDR_FOR_PID", "LDR_used_FOR_PID_comps", "dB", ENCODING_INT16, FALSE };

///////////// PHIDP_FOR_PID_output_field //////////////
//
// If write is TRUE, the PHIDP used by the pid algorithm is included in 
//   the output MDV file.
//
// Type: struct
//   typedef struct {
//      string name;
//      string long_name;
//      string units;
//      encoding_type_t encoding;
//        Options:
//          ENCODING_ASIS
//          ENCODING_INT8
//          ENCODING_INT16
//          ENCODING_FLOAT32
//      boolean write;
//   }
//
//

PHIDP_FOR_PID_output_field = { "PHIDP_FOR_PID", "PHIDP_used_FOR_PID_comps", "deg", ENCODING_INT16, FALSE };

///////////// RHOHV_FOR_PID_output_field //////////////
//
// If write is TRUE, the RHOHV used by the pid algorithm is included in 
//   the output MDV file.
//
// Type: struct
//   typedef struct {
//      string name;
//      string long_name;
//      string units;
//      encoding_type_t encoding;
//        Options:
//          ENCODING_ASIS
//          ENCODING_INT8
//          ENCODING_INT16
//          ENCODING_FLOAT32
//      boolean write;
//   }
//
//

RHOHV_FOR_PID_output_field = { "RHOHV_FOR_PID", "RHOHV_used_FOR_PID_comps", "", ENCODING_INT16, FALSE };

///////////// KDP_FOR_PID_output_field ////////////////
//
// If write is TRUE, the KDP used by the pid algorithm is included in 
//   the output MDV file.
//
// Type: struct
//   typedef struct {
//      string name;
//      string long_name;
//      string units;
//      encoding_type_t encoding;
//        Options:
//          ENCODING_ASIS
//          ENCODING_INT8
//          ENCODING_INT16
//          ENCODING_FLOAT32
//      boolean write;
//   }
//
//

KDP_FOR_PID_output_field = { "KDP_FOR_PID", "KDP_used_FOR_PID_comps", "deg/km", ENCODING_INT16, TRUE };

///////////// SDZDR_FOR_PID_output_field //////////////
//
// If write is TRUE, the SDZDR used by the pid algorithm is included in 
//   the output MDV file.
//
// Type: struct
//   typedef struct {
//      string name;
//      string long_name;
//      string units;
//      encoding_type_t encoding;
//        Options:
//          ENCODING_ASIS
//          ENCODING_INT8
//          ENCODING_INT16
//          ENCODING_FLOAT32
//      boolean write;
//   }
//
//

SDZDR_FOR_PID_output_field = { "SDZDR_FOR_PID", "SDZDR_used_FOR_PID_comps", "dB", ENCODING_INT16, FALSE };

///////////// SDPHIDP_FOR_PID_output_field ////////////
//
// If write is TRUE, the SDPHIDP used by the pid algorithm is included 
//   in the output MDV file.
//
// Type: struct
//   typedef struct {
//      string name;
//      string long_name;
//      string units;
//      encoding_type_t encoding;
//        Options:
//          ENCODING_ASIS
//          ENCODING_INT8
//          ENCODING_INT16
//          ENCODING_FLOAT32
//      boolean write;
//   }
//
//

SDPHIDP_FOR_PID_output_field = { "SDPHIDP_FOR_PID", "SDPHIDP_used_FOR_PID_comps", "deg", ENCODING_INT16, FALSE };

///////////// TEMP_FOR_PID_output_field ///////////////
//
// If write is TRUE, PID temperature is included in the output MDV file.
//
// Type: struct
//   typedef struct {
//      string name;
//      string long_name;
//      string units;
//      encoding_type_t encoding;
//        Options:
//          ENCODING_ASIS
//          ENCODING_INT8
//          ENCODING_INT16
//          ENCODING_FLOAT32
//      boolean write;
//   }
//
//

TEMP_FOR_PID_output_field = { "TEMP_FOR_PID", "PID temperature", "C", ENCODING_INT16, TRUE };

