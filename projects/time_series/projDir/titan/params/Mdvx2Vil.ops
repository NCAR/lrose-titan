/**********************************************************************
 * TDRP params for Mdvx2Vil
 **********************************************************************/

//======================================================================
//
// Program name: Mdv2Vil.
//
// Computes VIL and related values.
//
//======================================================================
 
//======================================================================
//
// DEBUG AND PROCESS CONTROL.
//
//======================================================================
 
///////////// debug ///////////////////////////////////
//
// Debug option.
// If set, debug messages will be printed appropriately.
// Type: boolean
//

debug = FALSE;

///////////// instance ////////////////////////////////
//
// Process instance.
// Used for registration with procmap.
// Type: string
//

instance = "ops";

///////////// Mode ////////////////////////////////////
//
// Operation mode.
// Archive mode automatically invoked by -interval option.
//
// Type: enum
// Options:
//     ARCHIVE
//     REALTIME
//

Mode = REALTIME;

///////////// MaxRealtimeValidAge /////////////////////
//
// Maximum valid age for files.
// REALTIME mode only.
// Type: int
//

MaxRealtimeValidAge = 1800;

//======================================================================
//
// INPUT and OUTPUT DIRECTORIES.
//
//======================================================================
 
///////////// TriggerUrl //////////////////////////////
//
// URL to trigger off, typically of the form
// mdvp:://host.domain:[port]:dir/dir.
// Program runs when new data appear here.
// Type: string
//

TriggerUrl = "mdvp:://localhost::mdv/radarCart/ops";

///////////// OutUrl //////////////////////////////////
//
// Output mdv URL, typically of the form
// mdvp:://host.domain:[port]:dir/dir.
// Output data are written here.
// Type: string
//

OutUrl = "mdvp:://localhost::mdv/vil/ops";

//======================================================================
//
// COMPUTING VIL.
//
// In this application, VIL is referred to as totalVil, as opposed to 
//   the deltaVil product. VIL and totalVil are synonymous.
//
//======================================================================
 
///////////// output_totalVil /////////////////////////
//
// Output VIL to mdv file.
// Type: boolean
//

output_totalVil = TRUE;

///////////// dbz_field ///////////////////////////////
//
// Reflectivity field name.
// Field name of the reflectivity data in the mdv file.
// Type: string
//

dbz_field = "DBZ";

///////////// min_height //////////////////////////////
//
// Minimum Height (in km).
// Minimum Height from which to calculate VIL.
// Minimum val: 0
// Type: double
//

min_height = 0;

//======================================================================
//
// STORM SEVERITY based on DELTA VIL.
//
// DELTA VIL is computed as the VIL above some level (say the -5C level) 
//   minus the VIL below that level. Regions in storms with an overhang 
//   (echo vault) will show a positive dvil. This is an indicator of a 
//   severe storm.
//
//======================================================================
 
///////////// output_dVil /////////////////////////////
//
// Output DVIL calculation to mdv file.
// DVIL is the difference between the upper mass and lower mass around 
//   the specified difference_height.
// Type: boolean
//

output_dVil = TRUE;

///////////// difference_height ///////////////////////
//
// Height (in km) used for DVIL calculation.
// Typically set to the height of the -5 C temperature.
// Minimum val: 0
// Type: double
//

difference_height = 5;

//======================================================================
//
// STORM SEVERITY based on SSS.
//
// Thanks to Pieter Visser of the South African Weather Service. 
//   <visser@weathersa.co.za>.
//
//======================================================================
 
///////////// output_SSS_index ////////////////////////
//
// Output the Storm Severity index calculation to mdv file.
// Type: boolean
//

output_SSS_index = TRUE;

//======================================================================
//
// SSS CALCULATION PARAMETERS.
//
// The SSS field is used to partition the grid into the following storm 
//   categories:
// 	1 = Weak Base
// 	2 = Weak Volume
// 	3 = Weak Top
// 	4 = Severe Base
// 	5 = Severe Volume
// 	6 = Severe Top
// 	7 = Very Severe Base
// 	8 = Very Severe Volume
// 	9 = Very Severe Top
// The sss_weak_dbz_max and sss_severe_dbz_max fields are used for 
//   classifying each grid square into the 3 different storm severity 
//   categories: weak, severe and very severe. Grid points that have a 
//   reflectivity value less than the sss_weak_dbz_max parameter are 
//   classified as weak. Grid points that have a reflectivity value 
//   between the sss_weak_dbz_max parameter and the sss_severe_dbz_max 
//   parameter are classified as severe. Grid points that have a 
//   reflectivity value greater than the sss_severe_dbz_max parameter are 
//   classified as very severe.
// Once the storm severity is determined, the other parameters are used 
//   to classify the type of storm in the following manner:
// 	if (centerMass < sss_base_center_mass_max) then
// 		if (stdDeviation >= sss_std_deviation_limit and
// 			maxDbzHeight < sss_base_height_max) then
// 				storm type = base
// 		endif
// 		if (stdDeviation >= sss_std_deviation_limit and
// 			maxDbzHeight >= sss_base_height_max) then
// 				storm type = volumetric
// 		endif
// 		if (stdDeviation < sss_std_deviation_limit) then
// 			storm type = base
// 		endif
// 	else if (centerMass < sss_top_center_mass_min) then
// 		if (stdDeviation >= sss_std_deviation_limit and
// 			maxDbzHeight < sss_base_height_max) then
// 				storm type = base
// 		endif
// 		if (stdDeviation >= sss_std_deviation_limit and
// 			maxDbzHeight == sss_base_height_max) then
// 				storm type = volumetric
// 		endif
// 		if (stdDeviation >= sss_std_deviation_limit and
// 			maxDbzHeight >= sss_top_height_min) then
// 				storm type = top
// 		endif
// 		if (stdDeviation < sss_std_deviation_limit) then
// 			storm type = volumetric
// 		endif
// 	else
// 		if (stdDeviation >= sss_std_deviation_limit and
// 			maxDbzHeight < sss_top_height_min) then
// 				storm type = volumetric
// 		endif
// 		if (stdDeviation >= sss_std_deviation_limit and
// 			maxDbzHeight >= sss_top_height_min) then
// 				storm type = top
// 		endif
// 		if (stdDeviation < sss_std_deviation_limit) then
// 			storm type = top
// 		endif
// 	endif.
//
//======================================================================
 
///////////// sss_weak_dbz_max ////////////////////////
//
// Maximum dbz value for storms classified as weak.
// Type: double
//

sss_weak_dbz_max = 45;

///////////// sss_severe_dbz_max //////////////////////
//
// Maximum dbz value for storms classified as severe.
// Type: double
//

sss_severe_dbz_max = 55;

///////////// sss_std_deviation_limit /////////////////
//
// Standard deviation limit used for SSS calculations.
// Type: double
//

sss_std_deviation_limit = 2;

///////////// sss_base_center_mass_max ////////////////
//
// Base center mass maximum used for SSS calculations.
// Type: double
//

sss_base_center_mass_max = 6.5;

///////////// sss_top_center_mass_min /////////////////
//
// Top center mass minimum used for SSS calculations.
// Type: double
//

sss_top_center_mass_min = 8;

///////////// sss_base_height_max /////////////////////
//
// Base height maximum used for SSS calculations.
// Type: double
//

sss_base_height_max = 6;

///////////// sss_top_height_min //////////////////////
//
// Top height minimum used for SSS calculations.
// Type: double
//

sss_top_height_min = 7;

//======================================================================
//
//  ------------ GRID PARAMETERS --------
// These specify the grid on which the
// computations will be performed.
// These are used only if RemapGrid is set
// to TRUE. If RemapGrid is FALSE then it is assumed
// that the fields are already on the same grid.
//
//======================================================================
 
///////////// RemapGrid ///////////////////////////////
//
// Set to TRUE to remap the data - useful if visible is at
// four times the resolution of the IR channels.
// Defaults to FALSE.
// Type: boolean
//

RemapGrid = FALSE;

///////////// grid_origin_lat /////////////////////////
//
// Latitude of grid origin.
// Must be specified.
// Minimum val: -90
// Maximum val: 90
// Type: double
//

grid_origin_lat = 34;

///////////// grid_origin_lon /////////////////////////
//
// Longitude of grid origin.
// Must be specified.
// Minimum val: -180
// Maximum val: 180
// Type: double
//

grid_origin_lon = -77;

///////////// grid_rotation ///////////////////////////
//
// Rotation (in degrees) of grid from true north.
// Usually 0 - applied to flat earth only.
// Minimum val: -360
// Type: double
//

grid_rotation = 0;

///////////// grid_lat1 ///////////////////////////////
//
// First true latitude for LAMBERT projection.
// Applies only to LAMBERT.
// Minimum val: -90
// Maximum val: 90
// Type: double
//

grid_lat1 = 25.1;

///////////// grid_lat2 ///////////////////////////////
//
// Second true latitude for LAMBERT projection.
// Applies only to LAMBERT.
// Minimum val: -90
// Maximum val: 90
// Type: double
//

grid_lat2 = 25;

///////////// grid_projection /////////////////////////
//
// Projection type of grid.
// Projections currently supported are FLAT, LATLON and LAMBERT.
//
// Type: enum
// Options:
//     FLAT
//     LATLON
//     LAMBERT
//

grid_projection = FLAT;

///////////// grid_nx /////////////////////////////////
//
// Number of cells in the grid in X.
// Minimum val: 1
// Type: int
//

grid_nx = 100;

///////////// grid_ny /////////////////////////////////
//
// Number of cells in the grid in Y.
// Minimum val: 1
// Type: int
//

grid_ny = 100;

///////////// grid_dx /////////////////////////////////
//
// Size of the cells in the output grid in X.
// Type: float
//

grid_dx = 1;

///////////// grid_dy /////////////////////////////////
//
// Size of the cells in the output grid in Y.
// Type: float
//

grid_dy = 1;

///////////// grid_minx ///////////////////////////////
//
// X at grid's lower left corner.
// Units for this parameter will depend upon the output grid_projection.
// Type: float
//

grid_minx = 0;

///////////// grid_miny ///////////////////////////////
//
// Y at grid's lower left corner.
// Units for this parameter will depend upon the output grid_projection.
// Type: float
//

grid_miny = 0;

//======================================================================
//
// ------ End of grid parameters. .
//
//======================================================================
 
