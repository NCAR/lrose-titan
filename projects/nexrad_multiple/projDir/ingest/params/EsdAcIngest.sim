/**********************************************************************
 * TDRP params for EsdAcIngest
 **********************************************************************/

//======================================================================
//
// EsdAcIngest reads aircraft data from an ASCII string and stores it in 
//   Spdb.
//
//======================================================================
 
//======================================================================
//
// DEBUGGING AND PROCESS CONTROL.
//
//======================================================================
 
///////////// debug ///////////////////////////////////
//
// Debug option.
//
// If set, debug messages will be printed appropriately.
//
//
// Type: enum
// Options:
//     DEBUG_OFF
//     DEBUG_NORM
//     DEBUG_VERBOSE
//

debug = DEBUG_OFF;

///////////// instance ////////////////////////////////
//
// Process instance.
//
// Used for registration with procmap.
//
//
// Type: string
//

instance = "sim";

///////////// mode ////////////////////////////////////
//
// Operating mode.
//
// In REALTIME mode, the aircraft data is read in from the serial 
//   connection. In ARCHIVE mode the data is read in from files, using the 
//   -f command line option. In TCP mode, reads data from a TCP server. In 
//   TEST mode, aircraft data is generated for testing purposes.
//
//
// Type: enum
// Options:
//     REALTIME
//     ARCHIVE
//     TCP
//     TEST
//

mode = TEST;

//======================================================================
//
// SERIAL DATA INPUT.
//
// The original system used a fixed-length preformatted string. The 
//   newer system uses a comma-delimited string. The program automatically 
//   determines which type of input string is being used.
//
//======================================================================
 
///////////// input_format ////////////////////////////
//
// Data input format.
//
// 	AUTOMATIC_FORMAT - The program automatically determine the data 
//   format. This can only be done if the data is in one of the following 
//   formats:
// 		COMMA_DELIMITED_FORMAT
// 		LONG_FIXED_STRING_FORMAT
// 		WMI_LONG_STRING_FORMAT
// 		WMI_STRING_FORMAT
// 	COMMA_DELIMITED_FORMAT - The fields in the data are delimited by 
//   commas. The line begins with the following fields:
// 		call sign
// 		year
// 		month
// 		day
// 		hour
// 		minute
// 		second
// 		latitude
// 		longitude
// 		altitude
// These fields are followed by the optional fields specified in the 
//   optional_field_names parameter.
// 	LONG_FIXED_STRING_FORMAT - The data is in a white-space delimited 
//   format. The fields appear in the following order:
// 		hour
// 		minute
// 		second
// 		pressure
// 		temperature
// 		dew point
// 		wind speed
// 		wind direction
// 		longitude
// 		latitude
// 		altitude
// 		king lwc
// 		fssp conc
// 		rosemount volts
// Since the call sign isn't specified in the data, the first call sign 
//   in the callsigns parameter is used as the call sign for this data. If 
//   the callsigns parameter is empty, the resulting AC position record 
//   won't have a call sign associated with it.
// 	WMI_LONG_STRING_FORMAT - The data is in the WMI long string format. 
//   In this format, the data is all in a long line with no delimiters 
//   with the following fields:
// 		call sign
// 		latitude * 10000
// 		longitude * 10000
// 		tas
// 		GPS altitude * 100
// 		pressure altitude
// 		tdry * 10
// 		lwjw * 100
// 		dew point * 10
// 		fssp
// 		burn in place
// 		number of burn in place
// 		ejectable
// 		number of ejectable
// 		left burn
// 		right burn
// 		ice hopper
// 		GPS time string
// 		GPS var
// 		GPS error
// 		GPS warn
// 	WMI_STRING_FORMAT - The data is received in the old WMI string 
//   format. In this format, the data is all in a long line with no 
//   delimiters with the following fields:
// 		call sign
// 		latitude
// 		longitude
// 		tas
// 		GPS altitude
// 		pressure altitude
// 		tdry
// 		lwjw
// 		???
// 		number of burn in place
// 		number of ejectable
// 		right burn
// 		left burn
// 		???
// 		burn in place
// 		ejectable
// 		GPS hour
// 		GPS minute
// 		GPS second
// 		GPS var
// 		GPS error
// 		airnav warn
// 	SEA_M300_FORMAT - This data is in white-space delimited files and 
//   contains the following fields:
// 		time in hh:mm:ss format
// 		date in m/dd/yyyy format
// 		latitude
// 		longitude
// 		altitude in feet
// 		altitude in meters
// 		temperature
// 		relative humidity
// 		CN concentration
// 		CCN concentration
// 		CCNSS
// 		CCN flag
// 		PCASP
// 		P1 - P15
// 		SPPRng
// 		SPP
// 		SPPLWC
// 		KPLWC
// 		mean dia
// 		MVD
// 		EffRad
// 		standard deviation
// 		disp
// 		2DCshad
// 		2DPshad
// 		S1 - S20
// 	POLCAST2_FORMAT - This data is in white-space delimited files and 
//   contains the following fields:
// 		tail number
// 		year
// 		month
// 		day
// 		hour
// 		minute
// 		second
// 		latitude (deg)
// 		longitude (deg)
// 		altitude (m)
// 		ground speed (knots)
// 		flare voltage (volts).
//
//
// Type: enum
// Options:
//     AUTOMATIC_FORMAT
//     COMMA_DELIMITED_FORMAT
//     LONG_FIXED_STRING_FORMAT
//     WMI_LONG_STRING_FORMAT
//     WMI_STRING_FORMAT
//     SEA_M300_FORMAT
//     CSV_GPS_FORMAT
//     POLCAST2_FORMAT
//

input_format = AUTOMATIC_FORMAT;

///////////// optional_field_names ////////////////////
//
// Array of variable fields following fixed fields.
//
// Used for comma-delimited format only. The comma-delimited format has 
//   10 fixed fields: callsign, year, month, day, hour, min, sec, lat, 
//   lon, alt. These are followed by optional fields. This array specifies 
//   the optional field list.
//
//
// Type: enum
// Options:
//     GS
//     TAS
//     TEMP
//     DEW_PT
//     LW
//     ERROR_FLAGS
//     R_BURN
//     L_BURN
//     BURN_IN_PLACE
//     EJECTABLE
//     N_BURN_IN_PLACE
//     N_EJECTABLE
//     DRY_ICE
// 1D array - variable length.
//

optional_field_names = {
 GS,
 ERROR_FLAGS,
 R_BURN,
 L_BURN,
 BURN_IN_PLACE,
 EJECTABLE,
 N_BURN_IN_PLACE,
 N_EJECTABLE,
 DRY_ICE
};

///////////// burn_in_place_time //////////////////////
//
// Nominal burn time for burn-in-place flares (secs).
//
// It is assumed that all burn-in-place flares will burn for this length 
//   of time. The program will keep track of how many flares are burning 
//   on each aircraft, and store that number in SPDB.
//
//
// Type: int
//

burn_in_place_time = 240;

//======================================================================
//
// SERIAL TTY input.
//
//======================================================================
 
///////////// input_device ////////////////////////////
//
// Name of input serial port device.
//
// Normally /dev/ttyS0 (COM1) or /dev/ttyS1 (COM2). Check that you set 
//   the permissions on the serial device to rw-rw-rw-, (666), so that we 
//   have read-write permissions for the port.
//
//
// Type: string
//

input_device = "/dev/ttyS1";

///////////// baud_rate ///////////////////////////////
//
// Baud rate.
//
// Baud rate for incoming serial data port.
//
//
// Type: enum
// Options:
//     BAUD_300
//     BAUD_1200
//     BAUD_2400
//     BAUD_4800
//     BAUD_9600
//     BAUD_19200
//     BAUD_38400
//

baud_rate = BAUD_9600;

///////////// dataIs7Bit //////////////////////////////
//
// Flag for 7-bit data.
//
// Set TRUE for 7-bit data, FALSE for 8-bit data.
//
//
// Type: boolean
//

dataIs7Bit = FALSE;

///////////// twoStopBits /////////////////////////////
//
// Flag for two stop bits.
//
// If TRUE, 2 stop bits. If FALSE, 1 stop bit.
//
//
// Type: boolean
//

twoStopBits = FALSE;

///////////// enableParity ////////////////////////////
//
// Flag for enabling parity checking.
//
// If TRUE, parity generation is enabled for outgoing characters, and 
//   checking enabled for incoming characters. If FALSE, parity generation 
//   and checking is off.
//
//
// Type: boolean
//

enableParity = FALSE;

///////////// oddParity ///////////////////////////////
//
// Flag for parity type.
//
// If TRUE, odd parity. If FALSE, even parity. Only applies if 
//   enableParity is TRUE.
//
//
// Type: boolean
//

oddParity = FALSE;

//======================================================================
//
// TCP input.
//
//======================================================================
 
///////////// tcp_server_host_name ////////////////////
//
// Name of TCP server host.
//
// For connection TCP. The name of the host for the TCP server.
//
//
// Type: string
//

tcp_server_host_name = "192.168.1.1";

///////////// tcp_server_port /////////////////////////
//
// TCP server port number.
//
// For connection TCP. The number of the port for the TCP server.
//
//
// Type: int
//

tcp_server_port = 2003;

///////////// send_tcp_handshake //////////////////////
//
// Option to send TCP handshake sequence to the server to trigger the 
//   data flow.
//
// If true, a sequence of bytes will be sent to the server to trigger 
//   the data flow. See 'tcp_handshape_bytes'.
//
//
// Type: boolean
//

send_tcp_handshake = FALSE;

///////////// tcp_handshake_bytes /////////////////////
//
// List of bytes to be sent to server for handshaking.
//
// This array of decimal integers is interpreted as a sequence of 
//   individual bytes which are to be sent to the server to trigger the 
//   data flow.
//
//
// Type: int
// 1D array - variable length.
//

tcp_handshake_bytes = {
 13,
 10
};

//======================================================================
//
// DATA OUTPUT.
//
//======================================================================
 
///////////// check_callsigns /////////////////////////
//
// Option to check callsigns.
//
// If TRUE, only aircraft in the callsigns array are stored. If FALSE, 
//   data from all aircraft is stored.
//
//
// Type: boolean
//

check_callsigns = FALSE;

///////////// callsigns ///////////////////////////////
//
// Callsign array.
//
// Array of valid callsigns.
//
//
// Type: string
// 1D array - variable length.
//

callsigns = {
 "none"
};

///////////// echo ////////////////////////////////////
//
// Option to echo incoming data string.
//
// If TRUE, the incoming strings are echoed to stdout.
//
//
// Type: boolean
//

echo = FALSE;

///////////// new_line_on_echo ////////////////////////
//
// Option to add new line to echo output.
//
// If FALSE, carriage return is used instead of new line.
//
//
// Type: boolean
//

new_line_on_echo = TRUE;

///////////// output_url //////////////////////////////
//
// Output SPDB URL.
//
// This is the path to the output data directory. You can use full URL 
//   sytnax and optionally put the data to a remote machine.
//
//
// Type: string
//

output_url = "spdbp:://localhost::spdb/ac_posn";

///////////// valid_period ////////////////////////////
//
// Valid period (secs).
//
// Time period over which the aircraft position is considered valid.
//
// Minimum val: 1
//
// Type: int
//

valid_period = 120;

///////////// output_ascii ////////////////////////////
//
// Option to output ASCII to separate SPDB data base.
//
// If TRUE, the incoming data strings will be stored as ASCII in a 
//   separate SPDB dir.
//
//
// Type: boolean
//

output_ascii = TRUE;

///////////// ascii_url ///////////////////////////////
//
// ASCII SPDB URL.
//
// Use if 'output_ascii' is TRUE.
//
//
// Type: string
//

ascii_url = "$(DATA_DIR)/spdb/ascii_ac_posn";

///////////// output_interval /////////////////////////
//
// Interval at which the data is written to the data base (secs).
//
// This prevents extremely rapid updates to the data base.
//
//
// Type: int
//

output_interval = 2;

///////////// change_lat_sign /////////////////////////
//
// Change the latitude sign.
//
// Use if southern latitudes are positive.
//
//
// Type: boolean
//

change_lat_sign = FALSE;

//======================================================================
//
// TEST SETUP.
//
//======================================================================
 
///////////// test_aircraft ///////////////////////////
//
// Details of aircraft for TEST mode.
//
// The test aircraft have a starting location, speed (knots) and 
//   altitude (ft). They wander randomly around. If they go further that 
//   100 km from their starting location they are brought back to the 
//   start. right_burn and left_burn indicate whether the burners should 
//   be on or off. ejectable_interval indicates the time beteen ejectable 
//   flares - set to -1 for no ejectables. burn_in_place_interval 
//   indicates the time between starting burn_in_place flares - set to -1 
//   for no burn_in_place flares. n_bip_at_a_time indictes the number of 
//   burn_in_place flares to start at a time.
//
//
// Type: struct
//   typedef struct {
//      string callsign;
//      double start_lat;
//      double start_lon;
//      double altitude;
//      double speed;
//      boolean right_burn;
//      boolean left_burn;
//      double ejectable_interval;
//      double burn_in_place_interval;
//      int n_bip_at_a_time;
//      double dry_ice_interval;
//   }
//
// 1D array - variable length.
//

test_aircraft = {
  {
    callsign = "ZJRA",
    start_lat = 39.2,
    start_lon = -105.1,
    altitude = 9500,
    speed = 150,
    right_burn = TRUE,
    left_burn = TRUE,
    ejectable_interval = -1,
    burn_in_place_interval = -1,
    n_bip_at_a_time = 0,
    dry_ice_interval = -1
  }
  ,
  {
    callsign = "ZJRB",
    start_lat = 40.6,
    start_lon = -104.7,
    altitude = 10500,
    speed = 250,
    right_burn = FALSE,
    left_burn = FALSE,
    ejectable_interval = 10,
    burn_in_place_interval = -1,
    n_bip_at_a_time = 0,
    dry_ice_interval = -1
  }
  ,
  {
    callsign = "ZCAN",
    start_lat = 39.7,
    start_lon = -105.25,
    altitude = 11500,
    speed = 150,
    right_burn = FALSE,
    left_burn = FALSE,
    ejectable_interval = -1,
    burn_in_place_interval = 300,
    n_bip_at_a_time = 1,
    dry_ice_interval = -1
  }
  ,
  {
    callsign = "ZLTK",
    start_lat = 40.0,
    start_lon = -105.0,
    altitude = 25000,
    speed = 200,
    right_burn = FALSE,
    left_burn = FALSE,
    ejectable_interval = -1,
    burn_in_place_interval = -1,
    n_bip_at_a_time = 0,
    dry_ice_interval = 30
  }
};

