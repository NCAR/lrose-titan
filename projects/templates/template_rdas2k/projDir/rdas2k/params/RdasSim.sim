/**********************************************************************
 * TDRP params for RdasSim
 **********************************************************************/

//======================================================================
//
// RDAS Simulator.
//
// This program simulates RDAS radar data and serves the data out on a 
//   socket.
//
//======================================================================
 
//======================================================================
//
// DEBUGGING AND PROCESS CONTROL.
//
//======================================================================
 
///////////// debug ///////////////////////////////////
//
// Debug option.
// If set, debug messages will be printed with the appropriate level of 
//   detail.
//
// Type: enum
// Options:
//     DEBUG_OFF
//     DEBUG_NORM
//     DEBUG_VERBOSE
//

debug = DEBUG_OFF;

///////////// instance ////////////////////////////////
//
// Process instance.
// Used for registration with procmap.
// Type: string
//

instance = "sim";

//======================================================================
//
// DATA INPUT.
//
//======================================================================
 
///////////// input_mdv_path //////////////////////////
//
// Path for Input MDV file.
// The file contains radar data which is sampled and served out to the 
//   client.
// Type: string
//

input_mdv_path = "sim/RdasSim/mdv/20010711/225715.mdv";

///////////// dbz_field_name //////////////////////////
//
// Name of DBZ data field.
// Type: string
//

dbz_field_name = "DBZ";

//======================================================================
//
// SERVER DETAILS.
//
//======================================================================
 
///////////// server_port /////////////////////////////
//
// Port for serving out radar data.
// RdasSim listens on this port. When a connection from a client is 
//   established, it receives commands from the client and sends beam data 
//   to the client.
// Type: int
//

server_port = $(RDAS_PORT);

//======================================================================
//
// CALIB PROPERTIES.
//
//======================================================================
 
///////////// calib_slope /////////////////////////////
//
// Calibration slope (count/dB).
// Type: double
//

calib_slope = 160;

///////////// calib_offset_1km ////////////////////////
//
// Calibration offset at 1km range (count).
// Type: double
//

calib_offset_1km = 5600;

//======================================================================
//
// DATA OUTPUT.
//
//======================================================================
 
///////////// beam_wait_msecs /////////////////////////
//
// Wait per beam (milli-secs).
// Type: int
//

beam_wait_msecs = 20;

///////////// big_endian //////////////////////////////
//
// Output is in Big-Endian byte order.
// If FALSE, order is Little-Endian.
// Type: boolean
//

big_endian = TRUE;

//======================================================================
//
// CALIBRATION OUTPUT.
//
//======================================================================
 
///////////// pulse_gate_start ////////////////////////
//
// Start gate number for calibration pulse.
// Type: int
//

pulse_gate_start = 210;

///////////// pulse_gate_end //////////////////////////
//
// End gate number for calibration pulse.
// Type: int
//

pulse_gate_end = 230;

///////////// pulse_height_count //////////////////////
//
// Height of calibration pulse in counts.
// Type: int
//

pulse_height_count = 5000;

///////////// pulse_height_delta //////////////////////
//
// Change in ht per keystroke.
// Type: int
//

pulse_height_delta = 100;
