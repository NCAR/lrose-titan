/**********************************************************************
 * TDRP params for TsSmartSave
 **********************************************************************/

//======================================================================
//
// TsSmartSave reads raw time-series data from a file message queue 
//   (FMQ). It saves the time series data out in files. It has the 
//   capability of saving out to different sub-directories based on the 
//   antenna position. For example, sun calibrations and 
//   vertically-pointing data may be saves to separate directories.
//
//======================================================================
 
//======================================================================
//
// DEBUGGING AND PROCESS CONTROL.
//
//======================================================================
 
///////////// debug ///////////////////////////////////
//
// Debug option.
// If set, debug messages will be printed appropriately.
//
// Type: enum
// Options:
//     DEBUG_OFF
//     DEBUG_NORM
//     DEBUG_VERBOSE
//     DEBUG_EXTRA
//

debug = DEBUG_OFF;

///////////// instance ////////////////////////////////
//
// Process instance.
// Used for registration with procmap.
// Type: string
//

instance = "ops";

///////////// register_with_procmap ///////////////////
//
// Option to register with the process mapper.
// If true, this application will try to register with procmap once per 
//   minute. (If unable to do so, no error occurs.).
// Type: boolean
//

register_with_procmap = TRUE;

//======================================================================
//
// DATA INPUT - from file message queue (FMQ).
//
//======================================================================
 
///////////// fmq_name ////////////////////////////////
//
// FMQ name. For FMQ input_mode only.
// Path to FMQ files. There are 2 files, one with a .buf extension and 
//   one with a .stat extention. This path does not include the 
//   extensions.
// Type: string
//

fmq_name = "$(DATA_DIR)/fmq/tseries";

///////////// filter_antenna_transitions //////////////
//
// Option to remove pulses for which the antenna transition flag is set.
// If true, transition pulses will not be stored in the file.
// Type: boolean
//

filter_antenna_transitions = FALSE;

///////////// use_fixed_angle_for_file_name ///////////
//
// Option to use the fixed angle (el or az) to compute the file name.
// If false, the actual measured angle will be used.
// Type: boolean
//

use_fixed_angle_for_file_name = TRUE;

///////////// add_scan_mode_to_file_name //////////////
//
// Option to add a string indicating the scan mode to the file name.
// Type: boolean
//

add_scan_mode_to_file_name = TRUE;

//======================================================================
//
// OUTPUT FILE FORMAT and PACKING.
//
//======================================================================
 
///////////// output_format ///////////////////////////
//
// Format of the output files.
// IWRF: stream of binary structs and IQ data following the IWRF 
//   (CSU-CHILL/NCAR Integrated Weather Radar Facility) format. TSACHIVE: 
//   Sigmet time series archive format.
//
// Type: enum
// Options:
//     FORMAT_IWRF
//     FORMAT_TSARCHIVE
//

output_format = FORMAT_IWRF;

///////////// output_packing //////////////////////////
//
// Packing of the IQ data in the output files.
// ASIS: as it was read. FL32: 32-bit floating point. SCALED_SI16: 
//   scaled signed 16-bit integers. DBM_PHASE_SI16: signed 16-bit integers 
//   representing power in dBM and phase in deg. SIGMET_SI16: Sigmet 
//   16-bit floating point packing as in the RVP8.
//
// Type: enum
// Options:
//     PACKING_ASIS
//     PACKING_FL32
//     PACKING_SCALED_SI16
//     PACKING_DBM_PHASE_SI16
//     PACKING_SIGMET_FL16
//

output_packing = PACKING_FL32;

///////////// output_scale ////////////////////////////
//
// Scaling factor for packed IQ data.
// This applies to the following packing types: SCALED_SI16, 
//   DBM_PHASE_SI16.

// For SCALED_SI16: volts = scaled signed_int * scale + offset.

// For DBM_PHASE_SI16: dbm = scaled signed_int * scale + offset.
// Type: double
//

output_scale = 1;

///////////// output_offset ///////////////////////////
//
// Offset for packed IQ data.
// See output_scale.
// Type: double
//

output_offset = 0;

//======================================================================
//
// NORMAL SCAN OUTPUT.
//
//======================================================================
 
///////////// save_normal_scan_data ///////////////////
//
// Option to save normal scan data.
// Normal scans are those which do not fall into the other categories - 
//   sunscan, vert pointing etc. Normal scans are typically PPIs and RHIs.
// Type: boolean
//

save_normal_scan_data = FALSE;

///////////// one_file_only ///////////////////////////
//
// If true, write one file only and then quit.
// Type: boolean
//

one_file_only = FALSE;

///////////// save_scans_in_sectors ///////////////////
//
// Option to save scans out in sectors to limit the file size.
// If false, each fixed angle will be in a single file. If true, the 
//   angular change will be limited per file. See max_sector_size.
// Type: boolean
//

save_scans_in_sectors = FALSE;

///////////// max_sector_size /////////////////////////
//
// Maximum sector size per output file (degrees).
// Once this maximum is exceeded, the current file will be closed and a 
//   new one started.
// Type: int
//

max_sector_size = 90;

///////////// max_pulses_per_file /////////////////////
//
// Maximum number of pulses per output file.
// Once this maximum is exceeded, the current file will be closed and a 
//   new one started.
// Type: int
//

max_pulses_per_file = 50000;

///////////// normal_output_dir ///////////////////////
//
// Normal mode output directory path.
// Files are written to this directory, unless a special condition 
//   applies, in which case an alternative directory may be used. See 
//   VERTICALLY-POINTING and SUN-SCAN sections below.
// Type: string
//

normal_output_dir = "$(DATA_DIR)/time_series/normal";

//======================================================================
//
// VERTICALLY-POINTING DATA OUTPUT.
//
//======================================================================
 
///////////// save_vert_pointing_data /////////////////
//
// Option to save vertically-pointing data to a separate directory.
// If true, vertically-pointing data will be saved to a separate 
//   subdirectory. See also 'min_elev_for_vert_pointing_data'.
// Type: boolean
//

save_vert_pointing_data = TRUE;

///////////// min_elev_for_vert_pointing //////////////
//
// Minimum elevation angle for vert pointing data (deg).
// If the elevation angle exceeds this min value, and is less than the 
//   max (see below), for at least the lockon period (see below), the 
//   radar will be assumed to be in vertically-pointing mode.
// Type: double
//

min_elev_for_vert_pointing = 87;

///////////// max_elev_for_vert_pointing //////////////
//
// Maximum elevation angle for vert pointing data (deg).
// See 'min_elev_for_vert_pointing' above.
// Type: double
//

max_elev_for_vert_pointing = 92;

///////////// vert_pointing_lockon_period /////////////
//
// Minimim lockon period for determing vert pointing mode (secs).
// In order to enter vert pointing mode, the antenna elevation must 
//   exceed 'min_elev_for_vert_pointing_data' and be less than 
//   'max_elev_for_vert_pointing' for a continuous period exceeding this 
//   number of seconds. This prevents interpreting vert pointing mode when 
//   the antenna scans through vertical during normal scanning operations.
// Type: double
//

vert_pointing_lockon_period = 5;

///////////// vert_pointing_output_dir ////////////////
//
// Vertically pointing data output directory path.
// Files are written to this directory when the radar is in 
//   vertically-pointing mode.
// Type: string
//

vert_pointing_output_dir = "$(DATA_DIR)/time_series/vert";

//======================================================================
//
// SUN-SCAN DATA OUTPUT.
//
//======================================================================
 
///////////// save_sun_scan_data //////////////////////
//
// Option to save sun-scan calibtation data to a separate directory.
// If true, sun-scan data will be saved to a separate subdirectory.
// Type: boolean
//

save_sun_scan_data = TRUE;

///////////// sun_scan_pointing_margin ////////////////
//
// Pointing margin to determine when radar is in sun-scan mode (deg).
// If both the azimuth and elevation angles are within this margin of 
//   the current sun angle for more than sun_scan_lockon_time, the radar 
//   will be assumed to be in sun-scan mode.
// Type: double
//

sun_scan_pointing_margin = 12;

///////////// sun_scan_lockon_period //////////////////
//
// Minimim lockon period for determing sun-scan mode (secs).
// In order to enter sun-scan mode, the antenna must point with 
//   'sun_scan_pointing_margin' of the sun for a continuous period 
//   exceeding this number of seconds. This prevents interpreting sun-scan 
//   mode when the antenna scans across the sun during normal scanning 
//   operations.
// Type: double
//

sun_scan_lockon_period = 5;

///////////// sun_scan_output_dir /////////////////////
//
// Sun-scan data output directory path.
// Files are written to this directory when the radar is in sun-scan 
//   mode.
// Type: string
//

sun_scan_output_dir = "$(DATA_DIR)/time_series/sunscan";

///////////// radar_latitude //////////////////////////
//
// Latiitude of radar location (deg).
// North is positive, South is negative.
// Type: double
//

radar_latitude = $(RADAR_LAT);

///////////// radar_longitude /////////////////////////
//
// Longitude of radar location (deg).
// East is positive, West is negative.
// Type: double
//

radar_longitude = $(RADAR_LON);

///////////// radar_altitude_km ///////////////////////
//
// MSL altitde of radar (km).
// Type: double
//

radar_altitude_km = $(RADAR_ALT_KM);

//======================================================================
//
// FLAG FILE OUTPUT.
//
//======================================================================
 
///////////// save_when_flag_file_exists //////////////
//
// Option to save data when a flag file exists.
// A user, or other process, can create a flag file of a given name. If 
//   this file exists, the program will save out data accordingly.
// Type: boolean
//

save_when_flag_file_exists = TRUE;

///////////// flag_file_path //////////////////////////
//
// Path for flag file.
// If this file exists, data will be written out to the 
//   flag_file_output_dir.
// Type: string
//

flag_file_path = "/tmp/TsSmartSave.flag";

///////////// flag_file_output_dir ////////////////////
//
// Directory for flagged data to be saved to.
// Files are written to this directory if the flag file exists.
// Type: string
//

flag_file_output_dir = "$(DATA_DIR)/time_series/save";

//======================================================================
//
// STATIONARY MODE OUTPUT.
//
//======================================================================
 
///////////// save_stationary_data ////////////////////
//
// Option to save data when the antenna is in stationary mode - i.e. 
//   stationary.
// This mode also checks the flag file. If the flag file does not exist, 
//   the stationary data will not be saved.
// Type: boolean
//

save_stationary_data = FALSE;

///////////// stationary_lockon_period ////////////////
//
// Minimim staionary time for determing stationary mode (secs).
// In order to enter stationary mode, the antenna must be stationay for 
//   this number of seconds.
// Type: int
//

stationary_lockon_period = 2;

///////////// stationary_max_angle_change /////////////
//
// Maximum angle change for stationary mode (deg).
// For the antenna to be considered stationary, it must not move by more 
//   than this angle in the lockon period.
// Type: double
//

stationary_max_angle_change = 0.01;

///////////// stationary_output_dir ///////////////////
//
// Vertically stationary data output directory path.
// Files are written to this directory when the radar is in 
//   vertically-stationary mode.
// Type: string
//

stationary_output_dir = "$(DATA_DIR)/time_series/stationary";

