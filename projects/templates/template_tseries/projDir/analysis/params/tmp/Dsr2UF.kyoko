/**********************************************************************
 * TDRP params for Dsr2UF
 **********************************************************************/

//======================================================================
//
// Dsr2UF reads radar beam-by-beam data from a DSR-format FMQ and saves 
//   the data out in Universal Format files.
//
//======================================================================
 
///////////// debug ///////////////////////////////////
//
// Debug option.
// If set, debug messages will be printed with the appropriate level of 
//   detail.
//
// Type: enum
// Options:
//     DEBUG_OFF
//     DEBUG_NORM
//     DEBUG_VERBOSE
//

debug = DEBUG_NORM;

///////////// instance ////////////////////////////////
//
// Process instance.
// Used for registration with procmap.
// Type: string
//

instance = "kyoko";

//======================================================================
//
// DATA INPUT.
//
//======================================================================
 
///////////// input_fmq_url ///////////////////////////
//
// Input URL for DsRadar data via FMQ.
// Type: string
//

input_fmq_url = "$(DATA_DIR)/fmq/mdv_s";

//======================================================================
//
// RADAR PROCESSING OPTIONS.
//
//======================================================================
 
///////////// override_radar_location /////////////////
//
// Option to override Dsr radar location.
// If TRUE, the UF output will use location information specified in 
//   'radar_location'.
// Type: boolean
//

override_radar_location = FALSE;

///////////// radar_location //////////////////////////
//
// .
// The radar_location need only be set if 'override_radar_location' is 
//   TRUE.
//
// Type: struct
//   typedef struct {
//      double latitude;
//      double longitude;
//      double altitude;
//   }
//
//

radar_location = { 0, 0, 0 };

///////////// end_of_vol_decision /////////////////////
//
// Decision type for end-of-volume.
// If END_OF_VOL_FLAG, the end-of-volume flag in the data will be used 
//   to trigger the end of volume. If LAST_TILT_IN_VOL, the end of the 
//   tilt number given by 'last_tilt_in_vol' will be used  to trigger the 
//   end-of-volume.
//
// Type: enum
// Options:
//     END_OF_VOL_FLAG
//     LAST_TILT_IN_VOL
//

end_of_vol_decision = END_OF_VOL_FLAG;

///////////// last_tilt_in_vol ////////////////////////
//
// The tilt number used to end the volume.
// Only applies if 'end_of_vol_decision' is set to LAST_TILT_IN_VOL.
// Type: long
//

last_tilt_in_vol = 0;

///////////// remove_antenna_transitions //////////////
//
// Option to remove out beams in which the antenna is in transition.
// When the antenna is changing from one volume scan to the next, the 
//   antenna is sometimes in a transtion state. If this is set, the 
//   transition beams are not included in the output files.
// Type: boolean
//

remove_antenna_transitions = TRUE;

//======================================================================
//
// DATA OUTPUT.
//
//======================================================================
 
///////////// output_fields ///////////////////////////
//
// Array of output field names.
// The program will only output these fields.

// The 'dsr_name' is the field name in the dsr data.
// The 'uf_name' is the name in the output file. UF names are limited to 
//   2 characters. Only the first 2 characters of the UF name will be 
//   used.

// The UF field headers are set differently for velocity fields. 
//   Velocity fields should be set to start with the character V. For 
//   example, the nyquist velocity shares a spot with the radar constant. 
//   So nyquist is included with velocity fields, while the radar constant 
//   is included with non-velocity fields.

// The 'scale' value is used to compute the integer output values for 
//   each field. UF files are stored as signed 2-byte integers. The real 
//   values of the field are scaled by this value.

// The equation used for calculating the stored values is:

// 	scaled-integer = real-value * scale.

// The equation used for interpreting the stored values is:

// 	real-value = scaled-integer / scale.

// If 'scale' is set to a negative number, the scale is computed 
//   dynamically from the data in the field record.
//
// Type: struct
//   typedef struct {
//      string dsr_name;
//      string uf_name;
//      int scale;
//   }
//
// 1D array - variable length.
//
//
//  Kyoko' note (6/6/2008) -------------------------------
//    ZDRM   - measured ZDR
//    ZDRM_F - measured ZDR with clutter filter
//    ZDR_F  - 'corrected' ZDR with clutter filter
//             'corrected' by zdrCorrectionDb (see output
//             from PrintMdv.  The field was added after
//             Feb 2008.
//    ZDR    - either corrected or raw measurements of
//             ZDR depending on zdrCorrectionDb.
//             ZDR = ZDRM if zdrCorrectionDb is absent in
//             the RADAR CALIB field in the record or is
//             indicated as 0 dB.
//    xxx_F  - where xxx is DBZ, VEL, SNR, PHIDP, KDP,
//             and RHOHV.  These are the measurements with
//             clutter filter.
//    xxx    - where xxx is DBZ, VEL, SNR, PHIDP, KDP,
//             and RHOHV.  These are raw measurements 
//             without clutter filter.
// --------------------------------------------------------
//

output_fields = {
  { "DBZ", "ZH", 200},
  { "VEL", "VR", 200},
  { "SNR", "SN", 200},
  { "ZDRM", "ZD", 200},
  { "PHIDP", "PH", 100},
  { "RHOHV", "RH", 200},
  { "KDP", "KD", 200},
  { "NCP", "NC", 200}
};

///////////// output_uf_dir ///////////////////////////
//
// Dir of output UF files.
// This directory must exist.
// Type: string
//

output_uf_dir = "$(DATA_DIR)/uf/kyoko";

///////////// output_file_prefix //////////////////////
//
// Prefix to the file name.
// Type: string
//

output_file_prefix = "CP2";

///////////// output_file_ext /////////////////////////
//
// Extension to the file name.
// Type: string
//

output_file_ext = "uf";

///////////// output_little_endian ////////////////////
//
// Option to output data in little-endian byte ordering.
// If FALSE, data will be output in big-endian byte ordering - also 
//   known as network-byte-order.
// Type: boolean
//

output_little_endian = FALSE;

///////////// skip_all_missing ////////////////////////
//
// Option to skip beams in which all data is missing.
// If TRUE, the application will not write beams in which all of the 
//   data are missing.
// Type: boolean
//

skip_all_missing = FALSE;

