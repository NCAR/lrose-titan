//======================================================================
//
// DERIVED FIELDS - READ OPERATIONS ONLY.
//
// Creating derived fields on the fly.
//
//======================================================================
 
///////////// handle_derived_fields ///////////////////
//
// Option to allow the option of computing derived fields on the fly.
// If TRUE, the server will check the requested fields against the 
//   derived_fields array. If any requested field name matches an entry in 
//   the derived fields array, it will create the derived field on the fly 
//   and add it to the Mdvx object which is returned to the client. All 
//   other fields (i.e. those which do not appear in the derived_fields 
//   array) will be returned as normal.
// Type: boolean
//

handle_derived_fields = TRUE;

///////////// derived_fields //////////////////////////
//
// Specifications for derived fields supported by the server.
// If a requested field name matches one specified in this array, and 
//   allow_derived_fields is TRUE, the server will attempt to derive the 
//   field on the fly. It will use the function specified, along with the 
//   arguments in the struct, to derive the field. The arguments actually 
//   used will be dependent on the particular function chosen. The 
//   arguments which are relevant to each function type are documented 
//   below.

// After the field has been derived, a linear function will be applied 
//   to produce the final field as follows:
//      final = derived * multiplier + constant.

// This allows a simple linear scaling and offset to be applied. The 
//   field will be added to the returned Mdvx object, with the supplied 
//   name, long_name, units and transform filled in.

// SUPPORTED FUNCTIONS

// FUNC_LINEAR:
//   read in the field specified in field_name_1 and apply the linear 
//   scaling. This can be used for units conversion. Examples are (a) 
//   converting from m/s to knots (multiplier = 0.53996847, constant = 
//   0.0), (b) converting degrees celsius to farenheight (multiplier = 
//   1.8, constant = 32.0)

// FUNC_SPEED_FROM_U_V:
//   compute speed from U and V fields. U field name is in field_name_1, 
//   and V field name is in field_name_2. U and V field data must both be 
//   in the same file, at the given URL.

// FUNC_DIRN_FROM_U_V:
//   compute direction from U and V fields. U field name is in 
//   field_name_1, and V field name is in field_name_2. U and V field data 
//   must both be in the same file, at the given URL. Direction returned 
//   in deg T.

// FUNC_DIFF_FIELDS_SAME_FILE:
//   compute difference between two fields from the same file. Data for 
//   both fields must be present in the file at the requested URL. First 
//   field name is in field_name_1, and second field name is in 
//   field_name_2. Difference is computed as (field_1 - field_2). Apply a 
//   multiplier of -1 to change the sign.

// FUNC_DIFF_FIELDS:
//   compute difference between two fields. Field data not necessarily 
//   in same file. First field name is in field_name_1, and second field 
//   name is in field_name_2. First field is in the current file. Second 
//   field URL is url_2. Difference is computed as (field_1 - field_2). 
//   Apply a multiplier of -1 to change the sign.

// FUNC_DIFF_IN_TIME:
//   compute difference between data now and at a different time. Field 
//   name is given in field_name_1. Time difference in seconds is given in 
//   i_arg_1. So time for second file is time for first file plus i_arg_1. 
//   Data difference is computed as value now minus the value at the 
//   different time. Apply a multiplier of -1 to change the sign.

// FUNC_VERT_COMPOSITE:
//   compute a vertical composite, which is the maximum value at any 
//   level. Optionally you can specify vertical level limits. Field name 
//   to be composited is given in field_name_1. If i_arg_1 is 0, the 
//   composite is computed from all vertical levels. If i_arg_1 is 1, the 
//   minimum vertical level is given in d_arg_1 and the maximum level in 
//   d_arg_2.

//   .
//
// Type: struct
//   typedef struct {
//      string name;
//      string long_name;
//      string units;
//      string transform;
//      function_t function;
//        Options:
//          FUNC_LINEAR
//          FUNC_SPEED_FROM_U_V
//          FUNC_DIRN_FROM_U_V
//          FUNC_DIFF_FIELDS_SAME_FILE
//          FUNC_DIFF_FIELDS
//          FUNC_DIFF_IN_TIME
//          FUNC_VERT_COMPOSITE
//      string field_name_1;
//      string field_name_2;
//      string url_2;
//      string url_3;
//      string s_arg_1;
//      string s_arg_2;
//      string s_arg_3;
//      string s_arg_4;
//      string s_arg_5;
//      string s_arg_6;
//      int i_arg_1;
//      int i_arg_2;
//      int i_arg_3;
//      double d_arg_1;
//      double d_arg_2;
//      double d_arg_3;
//      double multiplier;
//      double constant;
//   }
//
// 1D array - variable length.
//

derived_fields = {
  {
    name = "DBZ_DIFF",
    long_name = "DBZ_DIFF",
    units = "dBZ",
    transform = "dB",
    function = FUNC_DIFF_FIELDS,
    field_name_1 = "DBZ",
    field_name_2 = "DBZ",
    url_2 = "mdvp:://localhost::mdv/radarPolar/cp2_x/rhi",
    url_3 = "",
    s_arg_1 = "",
    s_arg_2 = "",
    s_arg_3 = "",
    s_arg_4 = "",
    s_arg_5 = "",
    s_arg_6 = "",
    i_arg_1 = 0,
    i_arg_2 = 0,
    i_arg_3 = 0,
    d_arg_1 = 0,
    d_arg_2 = 0,
    d_arg_3 = 0,
    multiplier = 1,
    constant = 0
  }
};

